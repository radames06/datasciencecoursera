result
}
gradientDescent <- function(alpha, startPoint, dataSet) {
# alpha est le learning rate
# startpoint est le teta de départ (t0, t1)
# dataset est une matrice (m, 2)
threshold <- 0.01
error_prec <- 1000
teta <- startPoint
tetaTemp <- c(0,0)
i <- 0
g <- ggplot(cars, aes(speed, dist)) + geom_point() + stat_smooth(method="lm")
while (TRUE) {
i <- i+1
tetaTemp[1] <- teta[1] - alpha * dTeta0dJ(teta, dataSet)
tetaTemp[2] <- teta[2] - alpha * dTeta1dJ(teta, dataSet)
teta <- tetaTemp
error <- costLR(teta, dataSet)
cat(sprintf("%i / teta0 : %f / teta1 : %f / J : %f \n", i, teta[1], teta[2], error))
print(g + geom_abline(intercept = teta[1], slope = teta[2], col="red"))
if (abs(error - error_prec) < threshold) {
break
}
error_prec <- error
}
teta
}
gradientDescent(0.00001, c(10,3), cars)
library(ggplot2)
h <- function(x, teta) {
# teta est un vecteur (1,2)
# x est un réel
teta[1] + teta[2] * x
}
costLR <- function(teta, dataset) {
# teta est un vecteur (1,2)
# dataset est une matrice (m, 2)
m <- length(dataset[,1])
j <- 0
for (i in c(1:m)) {
hteta <- h(dataset[i, 1], teta)
y <- dataset[i, 2]
j <- j + (hteta - y)^2
}
j <- j / (2 * m)
j
}
dTeta0dJ <- function(teta, dataSet) {
# teta est un vecteur (1,2)
# dataset est une matrice (m, 2)
m <- length(dataSet[,1])
result <- 0
for (i in c(1:m)) {
result <- result + h(dataSet[i, 1], teta) - dataSet[i, 2]
}
result <- result / m
result
}
dTeta1dJ <- function(teta, dataSet) {
# teta est un vecteur (1,2)
# dataset est une matrice (m, 2)
m <- length(dataSet[,1])
result <- 0
for (i in c(1:m)) {
result <- result +
(teta[1] - dataSet[i, 2]) * dataSet[i, 1] +
teta[2] * dataSet[i, 1]^2
}
result <- result / m
result
}
gradientDescent <- function(alpha, startPoint, dataSet) {
# alpha est le learning rate
# startpoint est le teta de départ (t0, t1)
# dataset est une matrice (m, 2)
threshold <- 0.01
error_prec <- 1000
teta <- startPoint
tetaTemp <- c(0,0)
i <- 0
g <- ggplot(cars, aes(speed, dist)) + geom_point() + stat_smooth(method="lm")
while (TRUE) {
i <- i+1
tetaTemp[1] <- teta[1] - alpha * dTeta0dJ(teta, dataSet)
tetaTemp[2] <- teta[2] - alpha * dTeta1dJ(teta, dataSet)
teta <- tetaTemp
error <- costLR(teta, dataSet)
cat(sprintf("%i / teta0 : %f / teta1 : %f / J : %f \n", i, teta[1], teta[2], error))
#print(g + geom_abline(intercept = teta[1], slope = teta[2], col="red"))
if (abs(error - error_prec) < threshold) {
break
}
error_prec <- error
}
teta
}
gradientDescent(0.00001, c(10,3), cars)
g <- ggplot(cars, aes(speed, dist)) + geom_point() + stat_smooth(method="lm")
g + geom_abline(intercept = 9.9, slope = 2.45, col="red")
gradientDescent(0.0001, c(10,3), cars)
gradientDescent(0.001, c(10,3), cars)
library(ggplot2)
h <- function(x, teta) {
# teta est un vecteur (1,2)
# x est un réel
teta[1] + teta[2] * x
}
costLR <- function(teta, dataset) {
# teta est un vecteur (1,2)
# dataset est une matrice (m, 2)
m <- length(dataset[,1])
j <- 0
for (i in c(1:m)) {
hteta <- h(dataset[i, 1], teta)
y <- dataset[i, 2]
j <- j + (hteta - y)^2
}
j <- j / (2 * m)
j
}
dTeta0dJ <- function(teta, dataSet) {
# teta est un vecteur (1,2)
# dataset est une matrice (m, 2)
m <- length(dataSet[,1])
result <- 0
for (i in c(1:m)) {
result <- result + h(dataSet[i, 1], teta) - dataSet[i, 2]
}
result <- result / m
result
}
dTeta1dJ <- function(teta, dataSet) {
# teta est un vecteur (1,2)
# dataset est une matrice (m, 2)
m <- length(dataSet[,1])
result <- 0
for (i in c(1:m)) {
result <- result +
(teta[1] - dataSet[i, 2]) * dataSet[i, 1] +
teta[2] * dataSet[i, 1]^2
}
result <- result / m
result
}
gradientDescent <- function(alpha, startPoint, dataSet) {
# alpha est le learning rate
# startpoint est le teta de départ (t0, t1)
# dataset est une matrice (m, 2)
threshold <- 0.001
error_prec <- 1000
teta <- startPoint
tetaTemp <- c(0,0)
i <- 0
g <- ggplot(cars, aes(speed, dist)) + geom_point() + stat_smooth(method="lm")
while (TRUE) {
i <- i+1
tetaTemp[1] <- teta[1] - alpha * dTeta0dJ(teta, dataSet)
tetaTemp[2] <- teta[2] - alpha * dTeta1dJ(teta, dataSet)
teta <- tetaTemp
error <- costLR(teta, dataSet)
cat(sprintf("%i / teta0 : %f / teta1 : %f / J : %f \n", i, teta[1], teta[2], error))
#print(g + geom_abline(intercept = teta[1], slope = teta[2], col="red"))
if (abs(error - error_prec) < threshold) {
break
}
error_prec <- error
}
teta
}
gradientDescent(0.001, c(10,3), cars)
g <- ggplot(cars, aes(speed, dist)) + geom_point() + stat_smooth(method="lm")
g + geom_abline(intercept = -7.9, slope = 3.37, col="red")
library(ggplot2)
h <- function(x, teta) {
# teta est un vecteur (1,2)
# x est un réel
teta[1] + teta[2] * x
}
costLR <- function(teta, dataset) {
# teta est un vecteur (1,2)
# dataset est une matrice (m, 2)
m <- length(dataset[,1])
j <- 0
for (i in c(1:m)) {
hteta <- h(dataset[i, 1], teta)
y <- dataset[i, 2]
j <- j + (hteta - y)^2
}
j <- j / (2 * m)
j
}
dTeta0dJ <- function(teta, dataSet) {
# teta est un vecteur (1,2)
# dataset est une matrice (m, 2)
m <- length(dataSet[,1])
result <- 0
for (i in c(1:m)) {
result <- result + h(dataSet[i, 1], teta) - dataSet[i, 2]
}
result <- result / m
result
}
dTeta1dJ <- function(teta, dataSet) {
# teta est un vecteur (1,2)
# dataset est une matrice (m, 2)
m <- length(dataSet[,1])
result <- 0
for (i in c(1:m)) {
result <- result +
(teta[1] - dataSet[i, 2]) * dataSet[i, 1] +
teta[2] * dataSet[i, 1]^2
}
result <- result / m
result
}
gradientDescent <- function(alpha, startPoint, dataSet) {
# alpha est le learning rate
# startpoint est le teta de départ (t0, t1)
# dataset est une matrice (m, 2)
threshold <- 0.0001
error_prec <- 1000
teta <- startPoint
tetaTemp <- c(0,0)
i <- 0
g <- ggplot(cars, aes(speed, dist)) + geom_point() + stat_smooth(method="lm")
while (TRUE) {
i <- i+1
tetaTemp[1] <- teta[1] - alpha * dTeta0dJ(teta, dataSet)
tetaTemp[2] <- teta[2] - alpha * dTeta1dJ(teta, dataSet)
teta <- tetaTemp
error <- costLR(teta, dataSet)
cat(sprintf("%i / teta0 : %f / teta1 : %f / J : %f \n", i, teta[1], teta[2], error))
#print(g + geom_abline(intercept = teta[1], slope = teta[2], col="red"))
if (abs(error - error_prec) < threshold) {
break
}
error_prec <- error
}
teta
}
gradientDescent(0.003, c(10,3), cars)
gradientDescent(0.01, c(10,3), cars)
gradientDescent(0.003, c(10,3), cars)
g + geom_abline(intercept = -15.8, slope = 3.83, col="red")
?runif
X <- (c(1,4), c(1,5))
X <- [c(1,4), c(1,5)]
X <- {c(1,4), c(1,5)}
?matrix
X <- matrix(c(1,4), c(1,5))
X
X <- matrix(c(1,4), c(1,5), nrow=2, ncol=2)
X
X <- matrix(c(c(1,4), c(1,5)), nrow=2, ncol=2)
X
X <- matrix(c(c(1,1), c(4,5)), nrow=2, ncol=2)
X
teta <- matrix(c(2,3), nrow=1)
teta
set.seed(12345)
par(mar = rep(0.2, 4))
?par
dataMatrix <- matrix(rnorm(400), nrow=40)
dataMatrix
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
?t
heatmap(dataMatrix)
rep(c(0, 3), each = 5)
set.seed(678910)
for (i in 1:40) {
coinFlip <- rbinom(1, size=1, prob=0.5)
if(coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
hh
type(hh)
class(hh)
hclust(dist(data.matrix()))
?hclust
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
hh$order
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
svd1
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, xlab = "Row", ylab = "First left singular vector", pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "first right singular vector", pch = 19)
swirl()
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5)
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
12
9
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col=c("red", "orange","purple"), pch=3, cex=2, lwd=2)
mdist(x, y, cy, cy)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newclust, mean)
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex = 2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=1, lwd=2)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red","green"), pch=3, cex=3, lwd=3)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[:1:2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] %*% t(svd1$v[,1])) * svd$d[1]
a1 <- (svd1$u[,1] %*% t(svd1$v[,1])) * svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(c(1:6))
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[, 10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[, -c(562, 563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12], maxCon))
m
mdist <- dist(sub1)
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562, 563)], centers=6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562, 563)], centers=6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch=19, ylab = "Walkdown Cluster")
install.packages("KernSmooth")
package(kernsmooth)
library(KernSmooth)
url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
download.file(url, destfile='Idaho.csv')
ds <- read.csv('Idaho.csv')
url2 <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
download.file(url2, destfile='Gross.csv')
gross <- read.csv('Gross.csv', skip=4, header=T)
gross$gdp <-
head(gross)
gross$gdp <- sub(',','',gross$X.4)
head(gross)
gross$gdp <- sub('[,]','',gross$X.4)
head(gross)
gross$gdp <- sub(',*','',gross$X.4)
head(gross)
gross$gdp <- sub('*,','',gross$X.4)
head(gross)
gross$gdp <- sub(',+','',gross$X.4)
head(gross)
gross$gdp <- gsub(',','',gross$X.4)
head(gross)
summary(gross$gdp)
gross$gdp
mean(gross$gdp)
gross$X
head(gross)
gross$X.1
is.numeric(X.1)
is.numeric(gross$X.1)
head(gross)
gross
setOption("max.print"=500)
head(gross, 350)
tail(gross, 100)
head(gross)
gross <- gross[!is.null(gross$X),]
head(gross)
mean(gross$gdp)
gross$gdp
gross <- gross[gross$X!='',]
head(gross)
mean(gross$gdp)
gross$gdp
gross <- read.csv('Gross.csv', skip=4, header=T)
gross$gdp <- gsub(',','',gross$X.4)
gross <- gross[gross$X.1!='',]
gross$gdp
mean(gross$gdp)
mean(as.numeric(as.character(gross$gdp)))
mean(as.numeric(gross$gdp))
as.numeric(gross$gdp)
mean(as.numeric(gross$gdp))
mean(as.numeric(gross$gdp), na.rm=T)
url3 <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
download.file(url3, destfile='Educ.csv')
educ <- read.csv('Educ.csv', header=T)
head(educ)
head(gross)
mds <- merge(educ, gross, by.x='X', by.y='CountryCode')
mds <- merge(educ, gross, by.y='X', by.x='CountryCode')
getwd()
setwd('C:/Users/Julien/Desktop/DataScience/datasciencecoursera/DataClean-W4')
download.file(url3, destfile='Educ.csv')
grep('Fiscal year end: June', educ$Special.Notes)
subject_test <- read.table('dataset/test/subject_test.csv')
getwd()
subject_test <- read.table('Dataset/test/subject_test.csv')
subject_test <- read.table('Dataset/test/subject_test.txt')
X_test <- read.table('Dataset/test/X_test.txt', sep=' ')
X_test <- read.table('Dataset/test/X_test.txt', sep=' ', fill=TRUE)
y_test <- read.table('Dataset/test/y_test.txt')
X_test[1,]
body_acc_x_test <- read.table('Dataset/test/body_acc_x_test.txt', sep=' ', fill=TRUE)
Inertial Signals/
body_acc_x_test <- read.table('Dataset/test/Inertial Signals/body_acc_x_test.txt', sep=' ', fill=TRUE)
body_acc_x_test <- read.table('Dataset/test/Inertial Signals/body_acc_x_test.txt', sep=' ', fill=TRUE)
body_acc_y_test <- read.table('Dataset/test/Inertial Signals/body_acc_y_test.txt', sep=' ', fill=TRUE)
body_acc_z_test <- read.table('Dataset/test/Inertial Signals/body_acc_z_test.txt', sep=' ', fill=TRUE)
body_gyro_x_test <- read.table('Dataset/test/Inertial Signals/body_gyro_x_test.txt', sep=' ', fill=TRUE)
body_gyro_y_test <- read.table('Dataset/test/Inertial Signals/body_gyro_y_test.txt', sep=' ', fill=TRUE)
body_gyro_z_test <- read.table('Dataset/test/Inertial Signals/body_gyro_z_test.txt', sep=' ', fill=TRUE)
total_acc_x_test <- read.table('Dataset/test/Inertial Signals/total_acc_x_test.txt', sep=' ', fill=TRUE)
total_acc_y_test <- read.table('Dataset/test/Inertial Signals/total_acc_y_test.txt', sep=' ', fill=TRUE)
total_acc_z_test <- read.table('Dataset/test/Inertial Signals/total_acc_z_test.txt', sep=' ', fill=TRUE)
subject_train <- read.table('Dataset/train/subject_train.txt')
X_train <- read.table('Dataset/train/X_train.txt', sep=' ', fill=TRUE)
y_train <- read.table('Dataset/train/y_train.txt')
body_acc_x_train <- read.table('Dataset/train/Inertial Signals/body_acc_x_train.txt', sep=' ', fill=TRUE)
body_acc_y_train <- read.table('Dataset/train/Inertial Signals/body_acc_y_train.txt', sep=' ', fill=TRUE)
body_acc_z_train <- read.table('Dataset/train/Inertial Signals/body_acc_z_train.txt', sep=' ', fill=TRUE)
body_gyro_x_train <- read.table('Dataset/train/Inertial Signals/body_gyro_x_train.txt', sep=' ', fill=TRUE)
body_gyro_y_train <- read.table('Dataset/train/Inertial Signals/body_gyro_y_train.txt', sep=' ', fill=TRUE)
body_gyro_z_train <- read.table('Dataset/train/Inertial Signals/body_gyro_z_train.txt', sep=' ', fill=TRUE)
total_acc_x_train <- read.table('Dataset/train/Inertial Signals/total_acc_x_train.txt', sep=' ', fill=TRUE)
total_acc_y_train <- read.table('Dataset/train/Inertial Signals/total_acc_y_train.txt', sep=' ', fill=TRUE)
total_acc_z_train <- read.table('Dataset/train/Inertial Signals/total_acc_z_train.txt', sep=' ', fill=TRUE)
a<- c(1:5)
a
b<c(5,4,8)
b<-c(5,4,8)
rbind(a,b)
subject <- rbind(subject_test, subject_train)
X <- rbind(X_test, X_train)
y <- rbind(y_test, y_train)
body_acc_x <- rbind(body_acc_x_test, body_acc_x_train)
colnames(X_test)
colnames(X_train)
